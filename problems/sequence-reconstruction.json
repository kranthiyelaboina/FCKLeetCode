{
  "problemName": "sequence-reconstruction",
  "language": "java",
  "code": "class Solution {\n    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {\n        if (seqs.isEmpty()) {\n            return org.length == 0;\n        }\n        int n = org.length;\n        List<Integer>[] graph = new List[n + 1];\n        int[] inDegree = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            graph[i] = new ArrayList<>();\n        }\n        int count = 0;\n        for (List<Integer> seq : seqs) {\n            for (int i = 0; i < seq.size(); i++) {\n                int num = seq.get(i);\n                if (num < 1 || num > n) {\n                    return false;\n                }\n                if (i > 0) {\n                    int prev = seq.get(i - 1);\n                    if (!graph[prev].contains(num)) {\n                        graph[prev].add(num);\n                        inDegree[num]++;\n                        count++;\n                    }\n                }\n            }\n        }\n        int edges = 0;\n        for (List<Integer> seq : seqs) {\n            edges += seq.size() > 1 ? seq.size() - 1 : 0;\n        }\n        if (count != edges) {\n        }\n        Queue<Integer> queue = new LinkedList<>();\n        for (int i = 1; i <= n; i++) {\n            if (inDegree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        int index = 0;\n        while (!queue.isEmpty()) {\n            if (queue.size() > 1) {\n                return false;\n            }\n            int node = queue.poll();\n            if (index >= n || node != org[index]) {\n                return false;\n            }\n            index++;\n            for (int neighbor : graph[node]) {\n                inDegree[neighbor]--;\n                if (inDegree[neighbor] == 0) {\n                    queue.offer(neighbor);\n                }\n            }\n        }\n        return index == n;\n    }\n}",
  "generatedBy": "gemini-ai",
  "timestamp": "2025-08-09T10:08:55.385Z"
}