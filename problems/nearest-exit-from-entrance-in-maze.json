{
  "problemName": "nearest-exit-from-entrance-in-maze",
  "language": "java",
  "code": "class Solution {\n    public int nearestExit(char[][] maze, int[] entrance) {\n        int rows = maze.length;\n        int cols = maze[0].length;\n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[]{entrance[0], entrance[1], 0});\n        maze[entrance[0]][entrance[1]] = '+';\n        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        while (!queue.isEmpty()) {\n            int[] curr = queue.poll();\n            int row = curr[0];\n            int col = curr[1];\n            int dist = curr[2];\n            for (int[] dir : dirs) {\n                int newRow = row + dir[0];\n                int newCol = col + dir[1];\n                if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && maze[newRow][newCol] == '.') {\n                    if (newRow == 0 || newRow == rows - 1 || newCol == 0 || newCol == cols - 1) {\n                        return dist + 1;\n                    }\n                    maze[newRow][newCol] = '+';\n                    queue.offer(new int[]{newRow, newCol, dist + 1});\n                }\n            }\n        }\n        return -1;\n    }\n}",
  "generatedBy": "gemini-ai",
  "timestamp": "2025-08-09T12:58:05.182Z"
}