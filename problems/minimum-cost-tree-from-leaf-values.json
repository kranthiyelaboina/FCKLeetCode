{
  "problemName": "minimum-cost-tree-from-leaf-values",
  "language": "java",
  "code": "class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        int[][] maxVal = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            maxVal[i][i] = arr[i];\n        }\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n - len; i++) {\n                int j = i + len - 1;\n                dp[i][j] = Integer.MAX_VALUE;\n                for (int k = i; k < j; k++) {\n                    maxVal[i][j] = Math.max(maxVal[i][j], Math.max(maxVal[i][k], maxVal[k + 1][j]));\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + maxVal[i][k] * maxVal[k + 1][j]);\n                }\n            }\n        }\n        return dp[0][n - 1];\n    }\n}",
  "generatedBy": "gemini-ai",
  "timestamp": "2025-08-09T16:50:08.465Z"
}