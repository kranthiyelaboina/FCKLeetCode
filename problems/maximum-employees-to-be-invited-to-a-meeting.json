{
  "problemName": "maximum-employees-to-be-invited-to-a-meeting",
  "language": "java",
  "code": "class Solution {\n    public int maximumInvitations(int[] favorite) {\n        int n = favorite.length;\n        int[] inDegree = new int[n];\n        List<Integer>[] graph = new List[n];\n        for (int i = 0; i < n; i++) {\n            graph[i] = new ArrayList<>();\n        }\n        for (int i = 0; i < n; i++) {\n            inDegree[favorite[i]]++;\n            graph[i].add(favorite[i]);\n        }\n        Queue<Integer> q = new LinkedList<>();\n        for (int i = 0; i < n; i++) {\n            if (inDegree[i] == 0) {\n                q.offer(i);\n            }\n        }\n        int count = 0;\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            count++;\n            for (int v : graph[u]) {\n                inDegree[v]--;\n                if (inDegree[v] == 0) {\n                    q.offer(v);\n                }\n            }\n        }\n        int cycleCount = 0;\n        int[] visited = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (visited[i] == 0 && inDegree[i] > 0) {\n                int cycleSize = 0;\n                int curr = i;\n                while (visited[curr] == 0) {\n                    visited[curr] = 1;\n                    curr = favorite[curr];\n                    cycleSize++;\n                }\n                if (visited[curr] == 1 && curr == i) {\n                    cycleCount += cycleSize;\n                }\n            }\n        }\n        return Math.max(count, cycleCount);\n    }\n}",
  "generatedBy": "gemini-ai",
  "timestamp": "2025-08-09T12:52:20.159Z"
}